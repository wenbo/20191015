Sams Teach Yourself Emacs in 24 Hours : http://docs.huihoo.com/homepage/shredderyin/emacs24/index.htm
M-n runs the command next-history-element (find-grep or multi-term)
M-p runs the command previous-history-element (find-grep or multi-term)

M-/    M-/ runs the command dabbrev-expand, Expand previous word "dynamically".
C-h c  which command does this keystroke invoke (C-h c runs the command describe-key-briefly)
C-h k  which command does this keystroke invoke and what does it do?(C-h k runs the command describe-key) <-*好き*->
C-h l  what were my last 100 typed keys
C-h v  what's this variable and what is it's value <-*好き*->
C-h v package-activated-list
C-h v ac-modes
C-h a  C-h a runs the command apropos-command, show commands that match PATTERN. PATTERN cna be a word, a list of words (separated by spaces), or a regexp (using some regexp special characters).
C-h f list-colors-display
c-h i runs the command info
c-h i m elisp
C-o runs the command open-line, which is an interactive compiled Lisp
C-x v C-h  Global Bindings Starting With C-x v:
C-c C-h
C-k kill the rest of the visual line
C-0 C-k kill until to beginning-of-visual-line
M-x C-h

M-n 或 C-u n 重复执行n次后继命令

C-x ( start-kbd-macro
C-x ) runs the command kmacro-end-macro

M-x list-packages
M-x list-color-display
M-x view-register 查看某一个 register
M-x list-registers 查看所有的 register
M-x package-install solarized-theme

Not found エラー
M-x package-refresh-contents
を実行したあとにもう一度 package-install を実行する。これで解決すればめでたしめでたし。
M-x package-refresh-contents パッケージ情報を更新する. 最新のものをインストールしたい場合は, 事前に実行して置くと 良い. 後述の package-list-packagesからインストールを行う場合は不要.

M-x package-list-packages パッケージ操作バッファを開く.
M-x eval-buffer (eval current buffer)
M-x revert-buffer (revert current buffer)
M-x goto-char : Set point to POSITION, a number or marker. Beginning of buffer is position (point-min), end is (point-max).
M-x load-theme
M-a : go to beginning of the sentence
M-e : go to end of the sentence
M-m : back-to-indentation

C-x 0  关闭当前窗口
C-x o  other-window
C-x 1  只保留当前窗口(delete-other-windows)
C-x 1  横向分屏(split-window-vertically)
C-x 3  竖向分屏(split-window-horizontally)
C-x 5 b ido-switch-buffer-other-frame
C-x 5 0 Delete the selected frame (delete-frame).
C-x 5 o Select another frame, and raise it.
F5     刷新当前文件(M-x revert-buffer)
C-@ or C-Space 开始Mark选中
C-@    标记文本块的开始
C-x h  标记整个缓冲区

C-w    剪切
M-w    复制
C-y   粘贴
M-y   在按下C-y后，按此键，切换粘帖的内容
M-<Arrow> 移动光标
C-x C-s 保存(save-file)
C-x C-w write-file
tab  　缩进
C-s 向前递增查找
C-r 反向递增查找
C-s C-w 向前递增查找, 把光标所在的单词作为查找对象
C-r C-w 反向递增查找，把光标所在的单词作为查找对象

C-x C-b list-buffers
C-x b switch-to-buffer
C-x k kill-buffer

C-c i 跳向上窗口
C-c k 跳向下窗口
C-c j 跳向左窗口
C-c l 跳向右窗口
C-c m windresize
C-c z runs the command shell, which is an interactive compiled Lisp

C-x ^ enlarge-window

C-x - shrink-window-if-larger-than-buffer
C-x { shrink-window-horizontally
C-x } enlarge-window-horizontally
C-M-v scroll-other-window
C-x 4 b switch-to-buffer-other-window
C-x 4 C-o display-buffer
C-x 4 f  find-file-other-window
C-x 4 d  dired-other-window
C-x 4 m  mail-other-window
C-x 4 0  kill-buffer-and-window


M-< 页首
M-> 页尾
C-c < 窗口后退 C-c <left> runs the command winner-undo
C-c > 窗口前进
C-v  屏幕上卷一个屏 
M-v  屏幕下卷一个屏 
C-M-v  另一个窗口下卷一个屏 
C-M-V  另一个窗口上卷一个屏 

C-c g, M-g g, M-g M-g:  goto line(runs the command goto-line, )

;;register
C-x r s r 
  Copy region into register r(copy-to-register)
C-x r i r 
  Insert text from register r(copy-to-register)
C-x r SPC r (C-x r SPC runs the command point-to-register)
  Save position of point in register r(point-to-register)
C-x r j r (C-x r j runs the command jump-to-register)
  Jump to the position saved in register r(jump-to-register)
C-x r r(copy-rectangle-to-register) では矩形領域をコピーすることができます。 貼り付ける際のコマンドは同じです。

;; Rectangles
C-x r k
  Kill the text of the region-rectangle, saving its contents as the last killed rectangle (kill-rectangle).
C-x r M-w
  Save the text of the region-rectangle as the last killed rectangle (copy-rectangle-as-kill).
C-x r d
  Delete the text of the region-rectangle (delete-rectangle).
C-x r y
  Yank the last killed rectangle with its upper left corner at point (yank-rectangle).
C-x r o
  Insert blank space to fill the space of the region-rectangle (open-rectangle). This pushes the previous contents of the region-rectangle to the right.
C-x r N
  Insert line numbers along the left edge of the region-rectangle (rectangle-number-lines). This pushes the previous contents of the region-rectangle to the right.
C-x r c
  Clear the region-rectangle by replacing all of its contents with spaces (clear-rectangle).




レジスターによるカーソル位置の登録では、 Emacs を終了すると忘れてしまいます。
こんなときにはブックマークを使います。
ブックマークでは登録内容をファイル(~/.emacs.d/bookmarks)に保存するので、次に起動した場合も有効です。 また、キーはアルファベット 1 文字ではなく、名前(文字列)となっています。
C-x r m	bookmark-set	カーソル位置をブックマークに保存
C-x r b	bookmark-jump	ブックマーク位置へジャンプ
C-x r l	bookmark-bmenu-list	登録済みブックマークの一覧表示
登録したブックマークを削除したい場合にはブックマークの一覧から行います。 一覧は Dired などの一般的なリストの操作と同じです。 (d でマークして、 x で実行)
;; bookmark
(defvar bookmark-map
  (let ((map (make-sparse-keymap)))
    ;; Read the help on all of these functions for details...
    (define-key map "x" 'bookmark-set)
    (define-key map "m" 'bookmark-set) ;"m"ark
    (define-key map "j" 'bookmark-jump)
    (define-key map "g" 'bookmark-jump) ;"g"o
    (define-key map "o" 'bookmark-jump-other-window)
    (define-key map "i" 'bookmark-insert)
    (define-key map "e" 'edit-bookmarks)
    (define-key map "f" 'bookmark-insert-location) ;"f"ind
    (define-key map "r" 'bookmark-rename)
    (define-key map "d" 'bookmark-delete)
    (define-key map "l" 'bookmark-load)
    (define-key map "w" 'bookmark-write)
    (define-key map "s" 'bookmark-save)
    map)
  "Keymap containing bindings to bookmark functions.
It is not bound to any key by default: to bind it
so that you have a bookmark prefix, just use `global-set-key' and bind a
key of your choice to `bookmark-map'.  All interactive bookmark
functions have a binding in this keymap.")
;; C-x r b (runs the command bookmark-jump)
C-x r l runs the command bookmark-bmenu-list, Display a list of existing bookmarks.



C-j runs the command eval-print-last-sexp
C-x C-e runs the command eval-last-sexp
M-!:  M-! runs the command shell-command

<---------  start of tabbar ---------->
tabbar-mode is an interactive autoloaded Lisp function in `tabbar.el'.

(tabbar-mode &optional ARG)

Toggle display of a tab bar in the header line.
With prefix argument ARG, turn on if positive, otherwise off.
Returns non-nil if the new state is enabled.

You can run the command `tabbar-forward-group' with C-c <C-down>

<---------  end of tabbar ---------->

<-------- start of workgroup ------->
wg-dired											C-c w d
<-------- end of workgroup ------->
<-------- helm -------
- helm-find-files:  By default, it is bound to <helm-prefix> C-x C-f.
Move up	C-p
Move down	C-n
Up directory	C-l
C-j: (Shows file name in the Helm buffer) or (Steps into the directory.)
-------- helm ------->
